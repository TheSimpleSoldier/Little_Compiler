
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '33820B7845AB29D0A5B132B09FBAC4F2'
    
_lr_action_items = {'INTLITERAL':([60,85,87,89,91,93,97,99,113,117,118,119,124,125,130,131,132,134,149,159,],[-84,-84,-51,-84,-84,-84,110,-54,-84,-50,-66,-67,-74,-84,-68,-69,-53,-84,-51,-84,]),'RETURN':([48,51,52,55,56,62,63,65,66,70,71,75,76,79,80,84,90,100,126,127,129,135,138,140,142,143,144,145,151,156,163,167,168,174,175,177,],[-84,60,-29,-84,-84,-41,-37,-43,-40,-42,60,-38,-39,-28,-27,-31,-44,-48,-84,-84,-30,-46,-84,60,-84,-78,60,-47,-76,-77,-75,-80,-84,60,-70,-79,]),'READ':([48,51,52,55,56,62,63,65,66,70,71,75,76,79,80,84,90,100,126,127,129,135,138,140,142,143,144,145,151,156,163,167,168,174,175,177,],[-84,61,-29,-84,-84,-41,-37,-43,-40,-42,61,-38,-39,-28,-27,-31,-44,-48,-84,-84,-30,-46,-84,61,-84,-78,61,-47,-76,-77,-75,-80,-84,61,-70,-79,]),'VOID':([14,],[26,]),'STRINGLITERAL':([28,95,162,],[34,108,172,]),'WHILE':([48,51,52,55,56,62,63,65,66,70,71,75,76,79,80,84,90,100,126,127,129,135,138,140,142,143,144,145,151,156,163,167,168,174,175,177,],[-84,64,-29,-84,-84,-41,-37,-43,-40,-42,64,-38,-39,-28,-27,-31,-44,-48,-84,-84,-30,-46,-84,64,-84,-78,64,-47,-76,-77,-75,-80,-84,64,-70,-79,]),'PROGRAM':([0,],[1,]),'RIGHTPAREN':([36,40,41,42,43,45,47,49,57,98,101,102,104,106,107,110,111,112,114,115,116,121,123,133,134,136,137,146,147,148,149,150,158,160,161,171,176,],[-84,44,-84,-19,-20,-18,-22,-84,-21,-49,120,-84,126,127,128,-64,-52,-56,-55,-63,-65,-15,-17,146,-84,-84,-73,-62,158,-84,-59,-16,-57,-61,-58,-84,-60,]),'MULTIPLY':([110,111,112,114,115,116,146,158,],[-64,130,-56,-55,-63,-65,-62,-57,]),'MINUS':([98,110,111,112,114,115,116,146,158,],[119,-64,-52,-56,-55,-63,-65,-62,-57,]),'DIVIDE':([110,111,112,114,115,116,146,158,],[-64,131,-56,-55,-63,-65,-62,-57,]),'BEGIN':([3,44,],[4,48,]),'SEMICOLON':([19,20,31,32,34,35,38,58,59,67,81,83,86,96,98,105,108,109,110,111,112,114,115,116,120,128,146,154,155,158,165,166,172,173,178,],[29,-84,-14,-12,37,-84,-13,-84,84,90,-32,-34,100,-84,-49,-45,129,-33,-64,-52,-56,-55,-63,-65,135,145,-62,-84,167,-57,-81,-83,177,-84,-82,]),'STRINGEQUALS':([18,68,77,152,],[28,91,95,162,]),'COMMA':([20,35,41,43,49,58,96,98,102,110,111,112,114,115,116,136,146,148,154,158,171,173,],[30,30,46,-20,46,82,82,-49,122,-64,-52,-56,-55,-63,-65,122,-62,159,164,-57,159,164,]),'PLUS':([98,110,111,112,114,115,116,146,158,],[118,-64,-52,-56,-55,-63,-65,-62,-57,]),'IDENTIFIER':([1,6,7,8,9,24,25,26,30,39,48,50,51,52,53,55,56,60,62,63,65,66,70,71,75,76,79,80,82,84,85,87,88,89,90,91,93,94,97,99,100,113,117,118,119,122,124,125,126,127,129,130,131,132,134,135,138,139,140,141,142,143,144,145,149,151,156,159,163,164,167,168,174,175,177,],[3,18,-8,20,-9,-10,33,-11,35,43,-84,58,68,-29,77,-84,-84,-84,-41,-37,-43,-40,-42,68,-38,-39,-28,-27,96,-31,-84,-51,102,-84,-44,-84,-84,102,115,-54,-48,-84,-50,-66,-67,136,-74,-84,-84,-84,-30,-68,-69,-53,-84,-46,-84,152,68,154,-84,-78,68,-47,-51,-76,-77,-84,-75,173,-80,-84,68,-70,-79,]),'$end':([2,23,],[0,-1,]),'FUNCTION':([4,5,10,11,12,17,21,22,29,37,78,],[-84,14,-84,-84,-5,14,-4,-3,-7,-6,-25,]),'END':([4,5,10,11,12,13,15,16,17,21,22,27,29,37,48,51,52,54,55,56,62,63,65,66,69,70,71,73,75,76,78,79,80,84,90,92,100,129,135,145,163,175,],[-84,-84,-84,-84,-5,23,-2,-24,-84,-4,-3,-23,-7,-6,-84,-84,-29,78,-84,-84,-41,-37,-43,-40,-36,-42,-84,-26,-38,-39,-25,-28,-27,-31,-44,-35,-48,-30,-46,-47,-75,-70,]),'STRING':([4,10,11,29,37,48,55,56,84,126,127,129,138,142,167,168,177,],[6,6,6,-7,-6,53,53,53,-31,139,139,-30,139,139,-80,139,-79,]),'LEFTPAREN':([33,60,61,64,72,74,85,87,89,91,93,97,99,113,115,117,118,119,124,125,130,131,132,134,149,159,],[36,-84,88,89,93,94,-84,-51,-84,-84,-84,113,-54,-84,134,-50,-66,-67,-74,-84,-68,-69,-53,-84,-51,-84,]),'BOOLEANOPS':([98,103,110,111,112,114,115,116,146,158,],[-49,124,-64,-52,-56,-55,-63,-65,-62,-57,]),'ELSE':([62,63,65,66,69,70,71,75,76,90,92,100,127,135,138,142,143,144,145,151,156,157,163,167,175,177,],[-41,-37,-43,-40,-36,-42,-84,-38,-39,-44,-35,-48,-84,-46,-84,-84,-78,-84,-47,-76,-77,168,-75,-80,-70,-79,]),'WRITE':([48,51,52,55,56,62,63,65,66,70,71,75,76,79,80,84,90,100,126,127,129,135,138,140,142,143,144,145,151,156,163,167,168,174,175,177,],[-84,74,-29,-84,-84,-41,-37,-43,-40,-42,74,-38,-39,-28,-27,-31,-44,-48,-84,-84,-30,-46,-84,74,-84,-78,74,-47,-76,-77,-75,-80,-84,74,-70,-79,]),'ENDIF':([62,63,65,66,69,70,71,75,76,90,92,100,127,135,138,142,143,144,145,151,156,157,163,167,168,169,170,174,175,177,179,],[-41,-37,-43,-40,-36,-42,-84,-38,-39,-44,-35,-48,-84,-46,-84,-84,-78,-84,-47,-76,-77,-84,-75,-80,-84,175,-72,-84,-70,-79,-71,]),'IF':([48,51,52,55,56,62,63,65,66,70,71,75,76,79,80,84,90,100,126,127,129,135,138,140,142,143,144,145,151,156,163,167,168,174,175,177,],[-84,72,-29,-84,-84,-41,-37,-43,-40,-42,72,-38,-39,-28,-27,-31,-44,-48,-84,-84,-30,-46,-84,72,-84,-78,72,-47,-76,-77,-75,-80,-84,72,-70,-79,]),'ENDWHILE':([62,63,65,66,69,70,71,75,76,90,92,100,126,135,138,140,142,143,145,151,153,156,163,167,175,177,],[-41,-37,-43,-40,-36,-42,-84,-38,-39,-44,-35,-48,-84,-46,-84,-84,-84,-78,-47,-76,163,-77,-75,-80,-70,-79,]),'INT':([4,10,11,14,29,36,37,46,48,55,56,84,126,127,129,138,142,167,168,177,],[7,7,7,7,-7,7,-6,7,7,7,7,-31,7,7,-30,7,7,-80,7,-79,]),'FLOAT':([4,10,11,14,29,36,37,46,48,55,56,84,126,127,129,138,142,167,168,177,],[9,9,9,9,-7,9,-6,9,9,9,9,-31,9,9,-30,9,9,-80,9,-79,]),'FLOATLITERAL':([60,85,87,89,91,93,97,99,113,117,118,119,124,125,130,131,132,134,149,159,],[-84,-84,-51,-84,-84,-84,116,-54,-84,-50,-66,-67,-74,-84,-68,-69,-53,-84,-51,-84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([4,10,11,],[5,21,22,]),'string_decl_block':([126,127,138,142,168,],[138,138,138,138,138,]),'var_type':([4,10,11,14,36,46,48,55,56,126,127,138,142,168,],[8,8,8,24,39,39,50,50,50,141,141,141,141,141,]),'expr_list':([134,],[147,]),'decl_func_var':([48,55,56,],[51,79,80,]),'read_stmt':([51,71,140,144,174,],[62,62,62,62,62,]),'primary':([97,],[114,]),'id_tail':([20,35,],[32,38,]),'id_list':([8,],[19,]),'return_stmt':([51,71,140,144,174,],[65,65,65,65,65,]),'string_decl':([4,10,11,],[11,11,11,]),'var_decl_block':([126,127,138,142,168,],[142,142,142,142,142,]),'expr_list_tail':([148,171,],[161,176,]),'id_tail_block':([154,173,],[165,178,]),'id_tail2':([102,136,],[121,150,]),'id_list_block':([141,],[155,]),'postfix_expr':([97,],[111,]),'factor_prefix':([85,],[97,]),'compop':([103,],[125,]),'assign_stmt':([51,71,140,144,174,],[66,66,66,66,66,]),'param_decl_tail':([41,49,],[45,57,]),'assign_expr':([51,71,140,144,174,],[67,67,67,67,67,]),'statement':([0,],[2,]),'factor':([85,],[98,]),'pgm_body':([4,],[13,]),'param_decl_list':([36,],[40,]),'empty':([4,5,10,11,17,20,35,36,41,48,49,51,55,56,58,60,71,85,89,91,93,96,102,113,125,126,127,134,136,138,140,142,144,148,154,157,159,168,171,173,174,],[12,16,12,12,16,31,31,42,47,52,47,69,52,52,83,87,69,99,87,87,87,83,123,87,87,143,143,149,123,143,69,143,69,160,166,170,87,143,160,166,69,]),'write_stmt':([51,71,140,144,174,],[70,70,70,70,70,]),'addop':([98,],[117,]),'func_decl':([5,17,],[15,27,]),'call_expr':([97,],[112,]),'stmt':([51,71,140,144,174,],[71,71,71,71,71,]),'else_part':([157,],[169,]),'any_type':([14,],[25,]),'param_decl':([36,46,],[41,49,]),'func_declaration':([5,17,],[17,17,]),'stmt_list':([51,71,140,144,174,],[73,92,153,157,179,]),'id_tail_func':([58,96,],[81,109,]),'if_stmt':([51,71,140,144,174,],[75,75,75,75,75,]),'decl_block_var':([126,127,138,142,168,],[140,144,151,156,174,]),'base_stmt':([51,71,140,144,174,],[63,63,63,63,63,]),'func_body':([48,],[54,]),'expr':([60,89,91,93,113,125,134,159,],[86,103,105,103,133,137,148,171,]),'var_decl_func':([48,55,56,],[55,55,55,]),'expr_prefix':([60,89,91,93,113,125,134,159,],[85,85,85,85,85,85,85,85,]),'var_decl':([4,10,11,],[10,10,10,]),'while_stmt':([51,71,140,144,174,],[76,76,76,76,76,]),'mulop':([111,],[132,]),'id_list2':([88,94,],[101,107,]),'cond':([89,93,],[104,106,]),'id_list_func':([50,],[59,]),'string_decl_func':([48,55,56,],[56,56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PROGRAM IDENTIFIER BEGIN pgm_body END','statement',5,'p_statement_start','LittleLexer.py',236),
  ('pgm_body -> decl func_decl','pgm_body',2,'p_pgm_body','LittleLexer.py',239),
  ('decl -> string_decl decl','decl',2,'p_decl','LittleLexer.py',243),
  ('decl -> var_decl decl','decl',2,'p_decl','LittleLexer.py',244),
  ('decl -> empty','decl',1,'p_decl','LittleLexer.py',245),
  ('string_decl -> STRING IDENTIFIER STRINGEQUALS STRINGLITERAL SEMICOLON','string_decl',5,'p_string_decl','LittleLexer.py',248),
  ('var_decl -> var_type id_list SEMICOLON','var_decl',3,'p_var_decl','LittleLexer.py',255),
  ('var_type -> INT','var_type',1,'p_var_type','LittleLexer.py',258),
  ('var_type -> FLOAT','var_type',1,'p_var_type','LittleLexer.py',259),
  ('any_type -> var_type','any_type',1,'p_any_type','LittleLexer.py',264),
  ('any_type -> VOID','any_type',1,'p_any_type','LittleLexer.py',265),
  ('id_list -> IDENTIFIER id_tail','id_list',2,'p_id_list','LittleLexer.py',270),
  ('id_tail -> COMMA IDENTIFIER id_tail','id_tail',3,'p_id_tail','LittleLexer.py',281),
  ('id_tail -> empty','id_tail',1,'p_id_tail','LittleLexer.py',282),
  ('id_list2 -> IDENTIFIER id_tail2','id_list2',2,'p_id_list2','LittleLexer.py',294),
  ('id_tail2 -> COMMA IDENTIFIER id_tail2','id_tail2',3,'p_id_tail2','LittleLexer.py',297),
  ('id_tail2 -> empty','id_tail2',1,'p_id_tail2','LittleLexer.py',298),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','LittleLexer.py',303),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','LittleLexer.py',304),
  ('param_decl -> var_type IDENTIFIER','param_decl',2,'p_param_decl','LittleLexer.py',307),
  ('param_decl_tail -> COMMA param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','LittleLexer.py',314),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','LittleLexer.py',315),
  ('func_decl -> func_declaration func_decl','func_decl',2,'p_func_decl','LittleLexer.py',319),
  ('func_decl -> empty','func_decl',1,'p_func_decl','LittleLexer.py',320),
  ('func_declaration -> FUNCTION any_type IDENTIFIER LEFTPAREN param_decl_list RIGHTPAREN BEGIN func_body END','func_declaration',9,'p_func_declaration','LittleLexer.py',323),
  ('func_body -> decl_func_var stmt_list','func_body',2,'p_func_body','LittleLexer.py',348),
  ('decl_func_var -> string_decl_func decl_func_var','decl_func_var',2,'p_decl_func_var','LittleLexer.py',351),
  ('decl_func_var -> var_decl_func decl_func_var','decl_func_var',2,'p_decl_func_var','LittleLexer.py',352),
  ('decl_func_var -> empty','decl_func_var',1,'p_decl_func_var','LittleLexer.py',353),
  ('string_decl_func -> STRING IDENTIFIER STRINGEQUALS STRINGLITERAL SEMICOLON','string_decl_func',5,'p_string_decl_func','LittleLexer.py',356),
  ('var_decl_func -> var_type id_list_func SEMICOLON','var_decl_func',3,'p_var_decl_func','LittleLexer.py',363),
  ('id_list_func -> IDENTIFIER id_tail_func','id_list_func',2,'p_id_list_func','LittleLexer.py',366),
  ('id_tail_func -> COMMA IDENTIFIER id_tail_func','id_tail_func',3,'p_id_tail_func','LittleLexer.py',377),
  ('id_tail_func -> empty','id_tail_func',1,'p_id_tail_func','LittleLexer.py',378),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','LittleLexer.py',389),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','LittleLexer.py',390),
  ('stmt -> base_stmt','stmt',1,'p_stmt','LittleLexer.py',393),
  ('stmt -> if_stmt','stmt',1,'p_stmt','LittleLexer.py',394),
  ('stmt -> while_stmt','stmt',1,'p_stmt','LittleLexer.py',395),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','LittleLexer.py',398),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','LittleLexer.py',399),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','LittleLexer.py',400),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','LittleLexer.py',401),
  ('assign_stmt -> assign_expr SEMICOLON','assign_stmt',2,'p_assign_stmt','LittleLexer.py',405),
  ('assign_expr -> IDENTIFIER STRINGEQUALS expr','assign_expr',3,'p_assign_expr','LittleLexer.py',408),
  ('read_stmt -> READ LEFTPAREN id_list2 RIGHTPAREN SEMICOLON','read_stmt',5,'p_read_stmt','LittleLexer.py',411),
  ('write_stmt -> WRITE LEFTPAREN id_list2 RIGHTPAREN SEMICOLON','write_stmt',5,'p_write_stmt','LittleLexer.py',414),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','LittleLexer.py',417),
  ('expr -> expr_prefix factor','expr',2,'p_expr','LittleLexer.py',421),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','LittleLexer.py',424),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','LittleLexer.py',425),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','LittleLexer.py',428),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','LittleLexer.py',431),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','LittleLexer.py',432),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','LittleLexer.py',435),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','LittleLexer.py',436),
  ('call_expr -> IDENTIFIER LEFTPAREN expr_list RIGHTPAREN','call_expr',4,'p_call_expr','LittleLexer.py',439),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','LittleLexer.py',442),
  ('expr_list -> empty','expr_list',1,'p_expr_list','LittleLexer.py',443),
  ('expr_list_tail -> COMMA expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','LittleLexer.py',446),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','LittleLexer.py',447),
  ('primary -> LEFTPAREN expr RIGHTPAREN','primary',3,'p_primary','LittleLexer.py',450),
  ('primary -> IDENTIFIER','primary',1,'p_primary','LittleLexer.py',451),
  ('primary -> INTLITERAL','primary',1,'p_primary','LittleLexer.py',452),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','LittleLexer.py',453),
  ('addop -> PLUS','addop',1,'p_addop','LittleLexer.py',456),
  ('addop -> MINUS','addop',1,'p_addop','LittleLexer.py',457),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','LittleLexer.py',460),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','LittleLexer.py',461),
  ('if_stmt -> IF LEFTPAREN cond RIGHTPAREN decl_block_var stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','LittleLexer.py',465),
  ('else_part -> ELSE decl_block_var stmt_list','else_part',3,'p_else_part','LittleLexer.py',482),
  ('else_part -> empty','else_part',1,'p_else_part','LittleLexer.py',483),
  ('cond -> expr compop expr','cond',3,'p_cond','LittleLexer.py',501),
  ('compop -> BOOLEANOPS','compop',1,'p_compop','LittleLexer.py',504),
  ('while_stmt -> WHILE LEFTPAREN cond RIGHTPAREN decl_block_var stmt_list ENDWHILE','while_stmt',7,'p_while_stmt','LittleLexer.py',508),
  ('decl_block_var -> string_decl_block decl_block_var','decl_block_var',2,'p_decl_block_var','LittleLexer.py',525),
  ('decl_block_var -> var_decl_block decl_block_var','decl_block_var',2,'p_decl_block_var','LittleLexer.py',526),
  ('decl_block_var -> empty','decl_block_var',1,'p_decl_block_var','LittleLexer.py',527),
  ('string_decl_block -> STRING IDENTIFIER STRINGEQUALS STRINGLITERAL SEMICOLON','string_decl_block',5,'p_string_decl_block','LittleLexer.py',530),
  ('var_decl_block -> var_type id_list_block SEMICOLON','var_decl_block',3,'p_var_decl_block','LittleLexer.py',537),
  ('id_list_block -> IDENTIFIER id_tail_block','id_list_block',2,'p_id_list_block','LittleLexer.py',540),
  ('id_tail_block -> COMMA IDENTIFIER id_tail_block','id_tail_block',3,'p_id_tail_block','LittleLexer.py',551),
  ('id_tail_block -> empty','id_tail_block',1,'p_id_tail_block','LittleLexer.py',552),
  ('empty -> <empty>','empty',0,'p_empty','LittleLexer.py',564),
]
