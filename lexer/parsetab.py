
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8F8CFEE3921D7E6476F6F523F2CEF79F'
    
_lr_action_items = {'INTLITERAL':([0,2,6,13,14,15,16,17,],[1,1,1,1,1,1,1,1,]),'KEYWORD':([0,],[2,]),')':([1,3,4,7,10,12,18,20,21,22,23,],[-11,-13,-10,-12,-14,18,-9,-6,-5,-7,-8,]),'(':([0,2,6,13,14,15,16,17,],[6,6,6,6,6,6,6,6,]),'+':([1,3,4,7,8,9,10,11,12,18,19,20,21,22,23,],[-11,-13,-10,-12,-14,15,-14,15,15,-9,15,-6,-5,-7,-8,]),'*':([1,3,4,7,8,9,10,11,12,18,19,20,21,22,23,],[-11,-13,-10,-12,-14,16,-14,16,16,-9,16,16,16,-7,-8,]),'-':([1,3,4,7,8,9,10,11,12,18,19,20,21,22,23,],[-11,-13,-10,-12,-14,14,-14,14,14,-9,14,-6,-5,-7,-8,]),'STRINGLITERAL':([0,2,6,13,14,15,16,17,],[3,3,3,3,3,3,3,3,]),'/':([1,3,4,7,8,9,10,11,12,18,19,20,21,22,23,],[-11,-13,-10,-12,-14,17,-14,17,17,-9,17,17,17,-7,-8,]),'FLOATLITERAL':([0,2,6,13,14,15,16,17,],[4,4,4,4,4,4,4,4,]),'OPERATOR':([0,2,6,13,14,15,16,17,],[7,7,7,7,7,7,7,7,]),'IDENTIFIER':([0,2,6,13,14,15,16,17,],[8,10,10,10,10,10,10,10,]),'=':([8,],[13,]),'$end':([1,2,3,4,5,7,8,9,10,11,18,19,20,21,22,23,],[-11,-4,-13,-10,0,-12,-14,-2,-14,-3,-9,-1,-6,-5,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,6,13,14,15,16,17,],[9,11,12,19,20,21,22,23,]),'statement':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> IDENTIFIER = expression','statement',3,'p_statement_assign','LittleLexer.py',81),
  ('statement -> expression','statement',1,'p_statement_expr','LittleLexer.py',85),
  ('statement -> KEYWORD expression','statement',2,'p_statement_expr','LittleLexer.py',86),
  ('statement -> KEYWORD','statement',1,'p_statement_expr','LittleLexer.py',87),
  ('expression -> expression + expression','expression',3,'p_expression_binop','LittleLexer.py',91),
  ('expression -> expression - expression','expression',3,'p_expression_binop','LittleLexer.py',92),
  ('expression -> expression * expression','expression',3,'p_expression_binop','LittleLexer.py',93),
  ('expression -> expression / expression','expression',3,'p_expression_binop','LittleLexer.py',94),
  ('expression -> ( expression )','expression',3,'p_expression_group','LittleLexer.py',101),
  ('expression -> FLOATLITERAL','expression',1,'p_expression_number','LittleLexer.py',105),
  ('expression -> INTLITERAL','expression',1,'p_expression_number','LittleLexer.py',106),
  ('expression -> OPERATOR','expression',1,'p_expression_operator','LittleLexer.py',110),
  ('expression -> STRINGLITERAL','expression',1,'p_expression_string','LittleLexer.py',115),
  ('expression -> IDENTIFIER','expression',1,'p_expression_name','LittleLexer.py',120),
]
